
import React, { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import { AlertCircle, Download, Printer, Settings } from "lucide-react";
import { getClientDetailReport, getClientsList } from "@/services/reporting/clientDetailReportService";
import { ExportService } from "@/services/reporting/exportService";
import { ClientReportFilters, ExportOptions, ReportCustomization } from "@/types/clientReporting";
import { ClientReportOverview } from "./ClientDetailReport/ClientReportOverview";
import { ClientTaskBreakdown } from "./ClientDetailReport/ClientTaskBreakdown";
import { ClientReportCharts } from "./ClientDetailReport/ClientReportCharts";
import { ClientReportFiltersPanel } from "./ClientDetailReport/ClientReportFiltersPanel";
import { ReportCustomizationDialog } from "./ClientDetailReport/ReportCustomizationDialog";
import { ExportOptionsDialog } from "./ClientDetailReport/ExportOptionsDialog";

const ClientDetailReport: React.FC = () => {
  const [selectedClientId, setSelectedClientId] = useState<string>("");
  const [filters, setFilters] = useState<ClientReportFilters>({
    dateRange: {
      from: new Date(new Date().getFullYear(), 0, 1), // Start of year
      to: new Date()
    },
    taskTypes: [],
    status: [],
    categories: [],
    includeCompleted: true
  });
  const [customization, setCustomization] = useState<ReportCustomization>({
    title: "Client Detail Report",
    includeLogo: false,
    includeFooter: true,
    customFooterText: "Generated by CPA Practice Management Software",
    colorScheme: "default",
    showMetrics: true,
    showCharts: true,
    groupTasksBy: "category"
  });
  const [showCustomizationDialog, setShowCustomizationDialog] = useState(false);
  const [showExportDialog, setShowExportDialog] = useState(false);

  // Fetch clients list
  const { data: clientsList } = useQuery({
    queryKey: ["clients-list"],
    queryFn: getClientsList,
    refetchOnWindowFocus: false
  });

  // Fetch client report data
  const { 
    data: reportData, 
    isLoading, 
    error 
  } = useQuery({
    queryKey: ["client-detail-report", selectedClientId, filters],
    queryFn: () => getClientDetailReport(selectedClientId, filters),
    enabled: !!selectedClientId,
    refetchOnWindowFocus: false
  });

  const handleFiltersChange = (newFilters: Partial<ClientReportFilters>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  };

  const handleExport = async (options: ExportOptions) => {
    if (!reportData) return;

    try {
      switch (options.format) {
        case 'pdf':
          await ExportService.exportToPDF(reportData, options, customization);
          break;
        case 'excel':
          await ExportService.exportToExcel(reportData, options);
          break;
        case 'csv':
          await ExportService.exportToCSV(reportData, options);
          break;
      }
    } catch (error) {
      console.error('Export failed:', error);
    }
  };

  const handlePrint = () => {
    if (!reportData) return;

    const defaultExportOptions: ExportOptions = {
      format: 'pdf',
      includeCharts: customization.showCharts,
      includeTaskDetails: true,
      includeTimeline: true,
      customFields: []
    };

    ExportService.exportToPDF(reportData, defaultExportOptions, customization);
  };

  if (!selectedClientId) {
    return (
      <div className="space-y-6">
        <div className="flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0">
          <div>
            <h2 className="text-2xl font-bold tracking-tight">Client Detail Reports</h2>
            <p className="text-muted-foreground">
              Generate comprehensive reports for individual clients
            </p>
          </div>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Select Client</CardTitle>
            <CardDescription>
              Choose a client to generate their detailed report
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Select value={selectedClientId} onValueChange={setSelectedClientId}>
              <SelectTrigger>
                <SelectValue placeholder="Select a client..." />
              </SelectTrigger>
              <SelectContent>
                {clientsList?.map(client => (
                  <SelectItem key={client.id} value={client.id}>
                    {client.legalName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="space-y-6">
        <Skeleton className="h-8 w-64" />
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {[...Array(4)].map((_, i) => (
            <Card key={i}>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <Skeleton className="h-4 w-20" />
                <Skeleton className="h-4 w-4" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-8 w-24" />
                <Skeleton className="h-3 w-32 mt-2" />
              </CardContent>
            </Card>
          ))}
        </div>
        <Skeleton className="h-64 w-full" />
      </div>
    );
  }

  if (error) {
    return (
      <Card>
        <CardContent className="flex items-center justify-center h-64">
          <div className="text-center">
            <AlertCircle className="h-12 w-12 text-destructive mx-auto mb-4" />
            <h3 className="text-lg font-semibold">Failed to load report data</h3>
            <p className="text-muted-foreground">Please try again later</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col space-y-4 md:flex-row md:items-center md:justify-between md:space-y-0">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">
            {reportData?.client.legalName} - Detail Report
          </h2>
          <p className="text-muted-foreground">
            Comprehensive analysis and task breakdown
          </p>
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setSelectedClientId("")}
          >
            Change Client
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowCustomizationDialog(true)}
          >
            <Settings className="h-4 w-4 mr-2" />
            Customize
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={handlePrint}
          >
            <Printer className="h-4 w-4 mr-2" />
            Print
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowExportDialog(true)}
          >
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
        </div>
      </div>

      <ClientReportFiltersPanel 
        filters={filters} 
        onFiltersChange={handleFiltersChange}
      />

      <Tabs defaultValue="overview" className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="tasks">Task Breakdown</TabsTrigger>
          <TabsTrigger value="charts">Charts & Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="overview">
          <ClientReportOverview data={reportData!} customization={customization} />
        </TabsContent>

        <TabsContent value="tasks">
          <ClientTaskBreakdown data={reportData!} customization={customization} />
        </TabsContent>

        <TabsContent value="charts">
          <ClientReportCharts data={reportData!} />
        </TabsContent>
      </Tabs>

      <ReportCustomizationDialog
        open={showCustomizationDialog}
        onOpenChange={setShowCustomizationDialog}
        customization={customization}
        onCustomizationChange={setCustomization}
      />

      <ExportOptionsDialog
        open={showExportDialog}
        onOpenChange={setShowExportDialog}
        onExport={handleExport}
      />
    </div>
  );
};

export default ClientDetailReport;
