
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { getClientDetailReport, getClientsList } from "@/services/reporting/clientDetailReportService";
import { ExportService } from "@/services/reporting/exportService";
import { ClientReportFilters, ExportOptions, ReportCustomization } from "@/types/clientReporting";

export const useClientDetailReport = () => {
  const [selectedClientId, setSelectedClientId] = useState<string>("");
  const [filters, setFilters] = useState<ClientReportFilters>({
    dateRange: {
      from: new Date(new Date().getFullYear(), 0, 1), // Start of year
      to: new Date()
    },
    taskTypes: [],
    status: [],
    categories: [],
    includeCompleted: true
  });
  const [customization, setCustomization] = useState<ReportCustomization>({
    title: "Client Detail Report",
    includeLogo: false,
    includeFooter: true,
    customFooterText: "Generated by CPA Practice Management Software",
    colorScheme: "default",
    showMetrics: true,
    showCharts: true,
    groupTasksBy: "category"
  });
  const [showCustomizationDialog, setShowCustomizationDialog] = useState(false);
  const [showExportDialog, setShowExportDialog] = useState(false);

  // Fetch clients list
  const { data: clientsList } = useQuery({
    queryKey: ["clients-list"],
    queryFn: getClientsList,
    refetchOnWindowFocus: false
  });

  // Fetch client report data
  const { 
    data: reportData, 
    isLoading, 
    error 
  } = useQuery({
    queryKey: ["client-detail-report", selectedClientId, filters],
    queryFn: () => getClientDetailReport(selectedClientId, filters),
    enabled: !!selectedClientId,
    refetchOnWindowFocus: false
  });

  const handleFiltersChange = (newFilters: Partial<ClientReportFilters>) => {
    setFilters(prev => ({ ...prev, ...newFilters }));
  };

  const handleExport = async (options: ExportOptions) => {
    if (!reportData) return;

    try {
      switch (options.format) {
        case 'pdf':
          await ExportService.exportToPDF(reportData, options, customization);
          break;
        case 'excel':
          await ExportService.exportToExcel(reportData, options);
          break;
        case 'csv':
          await ExportService.exportToCSV(reportData, options);
          break;
      }
    } catch (error) {
      console.error('Export failed:', error);
    }
  };

  const handlePrint = () => {
    if (!reportData) return;

    const defaultExportOptions: ExportOptions = {
      format: 'pdf',
      includeCharts: customization.showCharts,
      includeTaskDetails: true,
      includeTimeline: true,
      customFields: []
    };

    ExportService.exportToPDF(reportData, defaultExportOptions, customization);
  };

  return {
    // State
    selectedClientId,
    filters,
    customization,
    showCustomizationDialog,
    showExportDialog,
    
    // Data
    clientsList,
    reportData,
    isLoading,
    error,
    
    // Actions
    setSelectedClientId,
    setFilters,
    setCustomization,
    setShowCustomizationDialog,
    setShowExportDialog,
    handleFiltersChange,
    handleExport,
    handlePrint
  };
};
